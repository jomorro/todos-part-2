{"version":3,"sources":["components/header.js","components/todo_item.js","components/todo_list.js","components/footer.js","components/app.js","serviceWorker.js","index.js"],"names":["Header","state","new_todo","onFormChange","event","newValue","target","value","_this","setState","onFormSubmit","preventDefault","length","props","addTodo","react_default","a","createElement","className","onSubmit","this","placeholder","onChange","name","autoFocus","Component","TodoItem","_ref","completed","title","completeTodo","removeTodo","type","checked","onClick","TodoList","todos","map","todo","key","id","handleCompleteTodoClick","handleRemoveTodoClick","Footer","todo_count","href","completed_count","clearCompleted","App","Todos","reduce","accumulator","handleAddTodo","newTodoText","newTodoId","Object","values","newTodo","userId","prevState","assign","defineProperty","todoId","objectSpread","handleClearCompletedTodos","getCompletedTodosCount","header_Header","keys","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"smBAEqBA,6MACnBC,MAAQ,CAAEC,SAAU,MAEpBC,aAAe,SAAAC,GACb,IAAMC,EAAWD,EAAME,OAAOC,MAE9BC,EAAKC,SAAS,WACZ,MAAO,CAAEP,SAAUG,QAIvBK,aAAe,SAAAN,GACbA,EAAMO,iBAEFH,EAAKP,MAAMC,SAASU,OAAS,IAC/BJ,EAAKK,MAAMC,QAAQN,EAAKP,MAAMC,UAE9BM,EAAKC,SAAS,WACZ,MAAO,CAAEP,SAAU,gFAMvB,OACEa,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKV,cACnBK,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVG,YAAY,0BACZC,SAAUF,KAAKjB,aACfoB,KAAK,WACLC,WAAS,EACTjB,MAAOa,KAAKnB,MAAMC,oBAlCIuB,aCArB,SAASC,EAATC,GAKZ,IAJDC,EAICD,EAJDC,UACAC,EAGCF,EAHDE,MACAC,EAECH,EAFDG,aACAC,EACCJ,EADDI,WAEA,OACEhB,EAAAC,EAAAC,cAAA,MAAIC,UAAWU,EAAY,YAAc,IACvCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVc,KAAK,WACLC,QAASL,EACTN,SAAU,kBAAMQ,OAElBf,EAAAC,EAAAC,cAAA,aAAQY,GACRd,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUgB,QAAS,kBAAMH,SCfpC,SAASI,EAAStB,GAC/B,OACEE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXL,EAAMuB,OAASvB,EAAMuB,MAAMC,IAAI,SAAAC,GAAI,OAClCvB,EAAAC,EAAAC,cAACS,EAAD,CACEa,IAAKD,EAAKE,GACVX,MAAOS,EAAKT,MACZD,UAAWU,EAAKV,UAChBE,aAAcjB,EAAM4B,wBAAwBH,EAAKE,IACjDT,WAAYlB,EAAM6B,sBAAsBJ,EAAKE,SCRxC,SAASG,EAAO9B,GAC7B,OACEE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACdH,EAAAC,EAAAC,cAAA,cAASJ,EAAM+B,YADjB,iBAGA7B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,KAAR,QAEF9B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,WAAR,WAEF9B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,cAAR,eAIHhC,EAAMiC,gBAAkB,GACvB/B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBgB,QAASrB,EAAMkC,gBAAnD,gCChBaC,6MACnB/C,MAAQ,CACNmC,MAAOa,EAAMC,OAAO,SAACC,EAAab,GAEhC,OADAa,EAAYb,EAAKE,IAAMF,EAChBa,GACN,OAGLC,cAAgB,SAAAC,GACd,IAAMC,EACJC,OAAOC,OAAOhD,EAAKP,MAAMmC,OAAOc,OAAO,SAACC,EAAab,GAAd,OACrCa,EAAYX,GAAKF,EAAKE,GAAKW,EAAcb,IACzCE,GAAK,EAEHiB,EAAU,CACdC,OAAQ,EACRlB,GAAIc,EACJzB,MAAOwB,EACPzB,WAAW,GAGbpB,EAAKC,SAAS,SAAAkD,GACZ,MAAO,CACLvB,MAAOmB,OAAOK,OAAOD,EAAUvB,MAAxBmB,OAAAM,EAAA,EAAAN,CAAA,GAAkCD,EAAYG,UAK3DhB,wBAA0B,SAAAqB,GAAM,OAAI,SAAA1D,GAClCI,EAAKC,SAAS,SAAAkD,GACZ,IAAMvB,EAAKmB,OAAAQ,EAAA,EAAAR,CAAA,GAAQI,EAAUvB,OAG7B,OAFAA,EAAM0B,GAAQlC,WAAaQ,EAAM0B,GAAQlC,UAElC,CAAEQ,eAIbM,sBAAwB,SAAAoB,GAAM,OAAI,SAAA1D,GAChCI,EAAKC,SAAS,SAAAkD,GACZ,IAAMvB,EAAKmB,OAAAQ,EAAA,EAAAR,CAAA,GAAQI,EAAUvB,OAG7B,cAFOA,EAAM0B,GAEN,CAAE1B,eAIb4B,0BAA4B,WAC1BxD,EAAKC,SAAS,SAAAkD,GAWZ,MAAO,CAAEvB,MAVKmB,OAAOC,OAAOG,EAAUvB,OAAOc,OAC3C,SAACC,EAAab,GAIZ,OAHKA,EAAKV,YACRuB,EAAYb,EAAKE,IAAMF,GAElBa,GAET,UAONc,uBAAyB,WACvB,OAAOV,OAAOC,OAAOhD,EAAKP,MAAMmC,OAAOc,OACrC,SAACC,EAAab,GAAd,OAAwBA,EAAKV,YAAcuB,EAAcA,GACzD,4EAOF,OACEpC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAACiD,EAAD,CAAQpD,QAASM,KAAKgC,gBACtBrC,EAAAC,EAAAC,cAACkB,EAAD,CACEC,MAAOmB,OAAOC,OAAOpC,KAAKnB,MAAMmC,OAChCK,wBAAyBrB,KAAKqB,wBAC9BC,sBAAuBtB,KAAKsB,wBAE9B3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEC,WAAYW,OAAOY,KAAK/C,KAAKnB,MAAMmC,OAAOxB,OAC1CkC,gBAAiB1B,KAAK6C,yBACtBlB,eAAgB3B,KAAK4C,oCAnFEvC,aCKb2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05ee90de.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Header extends Component {\n  state = { new_todo: \"\" };\n\n  onFormChange = event => {\n    const newValue = event.target.value;\n\n    this.setState(() => {\n      return { new_todo: newValue };\n    });\n  };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    if (this.state.new_todo.length > 0) {\n      this.props.addTodo(this.state.new_todo);\n\n      this.setState(() => {\n        return { new_todo: \"\" };\n      });\n    }\n  };\n\n  render() {\n    return (\n      <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={this.onFormSubmit}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"what do you need to do?\"\n              onChange={this.onFormChange}\n              name=\"new-todo\"\n              autoFocus\n              value={this.state.new_todo}\n            />\n          </form>\n      </header>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function TodoItem({\n  completed,\n  title,\n  completeTodo,\n  removeTodo\n}) {\n  return (\n    <li className={completed ? \"completed\" : \"\"}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() => completeTodo()}\n        />\n        <label>{title}</label>\n        <button className=\"destroy\" onClick={() => removeTodo()} />\n      </div>\n    </li>\n  );\n}\n","import React from 'react'\nimport TodoItem from './todo_item';\n\nexport default function TodoList(props) {\n  return (\n    <ul className=\"todo-list\">\n      {props.todos && props.todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          title={todo.title}\n          completed={todo.completed}\n          completeTodo={props.handleCompleteTodoClick(todo.id)}\n          removeTodo={props.handleRemoveTodoClick(todo.id)}\n        />\n      ))}\n    </ul>\n  )\n}","import React from \"react\";\n\n\n\nexport default function Footer(props) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{props.todo_count}</strong> item(s) left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a href=\"/\">All</a>\n        </li>\n        <li>\n          <a href=\"/active\">Active</a>\n        </li>\n        <li>\n          <a href=\"/completed\">Completed</a>\n        </li>\n      </ul>\n\n      {props.completed_count > 0 && (\n        <button className=\"clear-completed\" onClick={props.clearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n}\n\n//here i am tryting to get the routes to go to a link which its does but i doesnt filter.","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport TodoList from \"./todo_list\";\nimport Footer from \"./footer\";\nimport Todos from \"../todos.json\";\nimport { BrowserRouter as Route, Switch, Link } from \"react-router-dom\";\n\nexport default class App extends Component {\n  state = {\n    todos: Todos.reduce((accumulator, todo) => {\n      accumulator[todo.id] = todo;\n      return accumulator;\n    }, {})\n  };\n\n  handleAddTodo = newTodoText => {\n    const newTodoId =\n      Object.values(this.state.todos).reduce((accumulator, todo) =>\n        accumulator.id > todo.id ? accumulator : todo\n      ).id + 1;\n\n    const newTodo = {\n      userId: 1,\n      id: newTodoId,\n      title: newTodoText,\n      completed: false\n    };\n\n    this.setState(prevState => {\n      return {\n        todos: Object.assign(prevState.todos, { [newTodoId]: newTodo })\n      };\n    });\n  };\n\n  handleCompleteTodoClick = todoId => event => {\n    this.setState(prevState => {\n      const todos = { ...prevState.todos };\n      todos[todoId].completed = !todos[todoId].completed;\n\n      return { todos };\n    });\n  };\n\n  handleRemoveTodoClick = todoId => event => {\n    this.setState(prevState => {\n      const todos = { ...prevState.todos };\n      delete todos[todoId];\n\n      return { todos };\n    });\n  };\n\n  handleClearCompletedTodos = () => {\n    this.setState(prevState => {\n      const todos = Object.values(prevState.todos).reduce(\n        (accumulator, todo) => {\n          if (!todo.completed) {\n            accumulator[todo.id] = todo;\n          }\n          return accumulator;\n        },\n        {}\n      );\n\n      return { todos };\n    });\n  };\n\n  getCompletedTodosCount = () => {\n    return Object.values(this.state.todos).reduce(\n      (accumulator, todo) => (todo.completed ? ++accumulator : accumulator),\n      0\n    );\n  };\n\n  //filter if/else properties\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <Header addTodo={this.handleAddTodo} />\n        <TodoList\n          todos={Object.values(this.state.todos)}\n          handleCompleteTodoClick={this.handleCompleteTodoClick}\n          handleRemoveTodoClick={this.handleRemoveTodoClick}\n        />\n        <Footer\n          todo_count={Object.keys(this.state.todos).length}\n          completed_count={this.getCompletedTodosCount()}\n          clearCompleted={this.handleClearCompletedTodos}\n          //jsx attribute for filter\n        />\n      </section>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}